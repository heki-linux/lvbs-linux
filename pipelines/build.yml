
variables:
  CONTAINER_IMAGE: mcr.microsoft.com/cbl-mariner/base/core:2.0
  CONTAINER_NAME: dom0kerneltest
  CONTAINER_VOL: /linux-dom0
  CONTAINER_RT: docker
  BUILDING_TAG: $[startsWith(variables['Build.SourceBranch'], 'refs/tags')]

trigger:
  batch: false
  branches:
    include:
      - msft/mshv-stable
      - msft/mshv-rolling
  tags:
    include:
      - msft/mshv-rolling/*

pr:
  autoCancel: false
  drafts: false
  branches:
    include:
      - msft/mshv-stable
      - msft/mshv-rolling

jobs:
- job: Kernel
  timeoutInMinutes: 120
  strategy:
    matrix:
      'Dom0 x86_64':
        machinePool: 'lsg-virt-amd64-1es-agent-pool-2'
        FLAVOR: 'dom0'
      'Mariner x86_64':
        machinePool: 'lsg-virt-amd64-1es-agent-pool-2'
        FLAVOR: 'mariner'
      'Dom0 aarch64':
        machinePool: 'lsg-virt-aarch64-1es-agent-pool-2'
        FLAVOR: 'dom0'
  pool:
    name: $(machinePool)

  steps:
  - checkout: self
    persistCredentials: true
    fetchTags: false
  - template: templates/ubuntu-20.04-build.yml
  - bash: |
      set -e
      set -x

      sudo systemctl enable --now docker

      # Allow agent to run docker operations without sudo
      sudo chmod a+rw /run/docker.sock

      $(CONTAINER_RT) pull $(CONTAINER_IMAGE)
      $(CONTAINER_RT) run -d -t --name $(CONTAINER_NAME) --volume $PWD:$(CONTAINER_VOL) $(CONTAINER_IMAGE)
      $(CONTAINER_RT) exec $(CONTAINER_NAME) $(CONTAINER_VOL)/pipelines/scripts/mariner-prepare
    displayName: 'Prepare Container'

  - bash: |
      set -e
      set -x
      $(CONTAINER_RT) exec $(CONTAINER_NAME) $(CONTAINER_VOL)/pipelines/scripts/config-validate
    condition: eq(variables.FLAVOR, 'dom0')
    displayName: 'Validate Config'

  - bash: |
      set -e
      set -x
      $(CONTAINER_RT) exec $(CONTAINER_NAME) git config --global --add safe.directory '*'
      $(CONTAINER_RT) exec -w $(CONTAINER_VOL)/ $(CONTAINER_NAME) $(CONTAINER_VOL)/pipelines/scripts/run_checkpatch.py \
        --ado-org microsoft \
        --ado-project LSG \
        --ado-access-token "$(System.AccessToken)" \
        --repo-id "$(Build.Repository.ID)" \
        --pr-id "$(System.PullRequest.PullRequestId)" \
        --source-branch "$(System.PullRequest.SourceBranch)"
    displayName: 'Run checkpatch.pl'
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/msft/mshv-stable'), eq(variables.FLAVOR, 'dom0'))
    continueOnError: true

  - bash: |
      set -e
      set -x
      $(CONTAINER_RT) exec $(CONTAINER_NAME) $(CONTAINER_VOL)/pipelines/scripts/kernel-compile $(FLAVOR)
    displayName: 'Compile Kernel'

  - bash: |
      set -e
      set -x
      $(CONTAINER_RT) rm -f $(CONTAINER_IMAGE)
    displayName: 'Cleanup container'


- job: Packaging
  timeoutInMinutes: 30
  condition: eq(variables.BUILDING_TAG, 'true')
  dependsOn: Kernel
  pool:
    name: lsg-virt-amd64-1es-agent-pool-3

  steps:
  - checkout: self
    persistCredentials: true
  - template: templates/ubuntu-20.04-build.yml

  - bash: |
      set -e
      set -x
      ./pipelines/scripts/tag-validate "$(Build.SourceBranchName)"
    displayName: 'Validate Tag'

  - bash: |
      set -e
      set -x
      ./pipelines/scripts/ref-package "$(Build.SourceBranch)"
    displayName: 'Package tarball'

  - bash: |
      set -e
      set -x
      TGZ=$(ls -1 *.tar.gz | head -1)
      SUM="${TGZ}.sha256"
      # TODO might move the checksum calculation to the packaging script instead
      sha256sum "${TGZ}" | cut -d ' ' -f1 > "${SUM}"
      for i in "${TGZ}" "${SUM}"; do
              az storage blob upload \
                --sas-token '$(SOURCES_STORAGE_SAS)' \
                --account-name '$(SOURCES_STORAGE_ACCOUNT)' \
                --container-name '$(SOURCES_STORAGE_CONTAINER)' \
                --file "${i}" \
                --name "${i}"
      done
    displayName: 'Upload tarball'
